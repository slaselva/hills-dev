---
// src/components/ImageDivider.astro
// Full-width image divider with responsive sources and parallax effect.

import type { HTMLAttributes } from 'astro/types';

// Define the properties this component accepts
interface Props extends HTMLAttributes<'div'> {
  desktopImageSrc: string;  // Path to the larger image (e.g., "/images/dividers/pipes-desktop.jpg")
  mobileImageSrc: string;   // Path to the smaller image (e.g., "/images/dividers/pipes-mobile.jpg")
  alt: string;             // Alt text for the image (Important for accessibility!)
  breakpoint?: string;      // Media query for switching images (default: max-width 767px)
  parallaxStrength?: number; // How much parallax effect (0 = none, 0.3 = subtle, higher = more intense)
  minHeight?: string;       // Minimum height for the container (e.g., '300px', '40vh')
}

// Get props and set defaults
const {
  desktopImageSrc,
  mobileImageSrc,
  alt,
  breakpoint = '(max-width: 767px)', // Default breakpoint for mobile image
  parallaxStrength = 0.3,            // Default parallax intensity
  minHeight = '300px',                // Default minimum height
  ...rest // Pass through any other attributes like class, id, etc.
} = Astro.props;

// Generate a unique ID for targeting with script, in case multiple instances are used
const uniqueId = `parallax-${crypto.randomUUID().slice(0, 8)}`;
---

<div
  id={uniqueId}
  class:list={["image-divider-container", rest.class]}
  style={{ minHeight: minHeight }}
  {...rest}
>
  <picture class="parallax-picture">
    <source media={breakpoint} srcset={mobileImageSrc} />
    <img class="parallax-image" src={desktopImageSrc} alt={alt} loading="lazy" decoding="async" />
  </picture>
</div>

<style define:vars={{ uniqueId: `#${uniqueId}` }}>
  /* Using define:vars to potentially scope script selectors if needed, although ID is usually enough */
  .image-divider-container {
    position: relative; /* Establishes positioning context for the absolute image */
    overflow: hidden;  /* Hides the parts of the image that move outside the container */
    width: 100%;
    height: 30vh;
    /* min-height is set via inline style prop */
  }

  .parallax-picture {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; /* Cover the container initially */
    /* The image itself needs to be taller than the container for parallax */
    /* This is handled by the transform in the script and ensuring source images are tall enough */
  }

  .parallax-image {
    display: block;
    position: absolute;
    bottom: -50%;
    width: 100%;
    height: auto; /* Will be adjusted by JS potentially, needs testing */
    min-height: 100%; /* Ensure it covers container vertically */
    min-width: 100%; /* Ensure it covers container horizontally */
    object-fit: cover; /* Cover the area, potentially cropping */
    /* Start position will be adjusted by JS */
    transform: translateY(0px);
    will-change: transform; /* Hint for browser optimization */
    transition: transform 0.1s linear; /* Optional: Smooth out jitter slightly */
  }
</style>

<script define:vars={{ uniqueId, parallaxStrength }}>
  // Client-side script for parallax effect

  // Wait for the DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById(uniqueId);
    if (!container) return;

    const imgElement = container.querySelector('.parallax-image');
    if (!imgElement) return;

    // Store initial styles or computed values if needed
    // let initialTop = 0; // Example if adjusting top instead of transform

    // Use Intersection Observer for efficiency: only run parallax when element is visible
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Element is visible, add scroll listener
          window.addEventListener('scroll', handleScroll, { passive: true });
           // Initial calculation on becoming visible
          requestAnimationFrame(updateParallax);
        } else {
          // Element is not visible, remove scroll listener
          window.removeEventListener('scroll', handleScroll);
        }
      });
    }, {
      rootMargin: '0px', // Adjust if needed, e.g., '100px' to start effect earlier
      threshold: 0 // Trigger as soon as 1 pixel is visible
    });

    // Throttling function to limit how often updateParallax runs
    function throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        }
    }

    const handleScroll = throttle(() => {
      // Use requestAnimationFrame for smooth rendering
      requestAnimationFrame(updateParallax);
    }, 16); // Throttle to roughly 60fps


    function updateParallax() {
        if (!container || !imgElement) return; // Guard clause

        const rect = container.getBoundingClientRect();
        // Calculate how much of the element is visible or its position relative to viewport center
        const viewportHeight = window.innerHeight;

        // Calculate scroll progress relative to the element being in the middle of the viewport
        // Center of element = rect.top + rect.height / 2
        // Center of viewport = viewportHeight / 2
        // Difference = (rect.top + rect.height / 2) - (viewportHeight / 2)
        // Normalize this difference (e.g., from -viewportHeight/2 to +viewportHeight/2)
        const scrollCenterOffset = (rect.top + rect.height / 2) - (viewportHeight / 2);

        // Calculate the translation based on the offset and strength
        // We want the image to move up when the element scrolls up from the bottom,
        // and move down when scrolling down from the top.
        // The maximum movement happens when the element center is far from viewport center.
        // A simple approach: translateY = -scrollCenterOffset * strength
        // The negative sign makes the image move opposite to the scroll direction relative to center
        const translateY = -scrollCenterOffset * parallaxStrength;

        // Apply the transform
        imgElement.style.transform = `translateY(${translateY}px)`;
    }


    // Start observing the container element
    observer.observe(container);

    // Optional: Clean up listener if the component is dynamically removed (relevant for SPAs/frameworks)
    // Astro doesn't usually remove components like this in MPA mode, but good practice.
    // container.addEventListener('astro:unmount', () => { // Example using Astro's lifecycle event if needed
    //    window.removeEventListener('scroll', handleScroll);
    //    observer.unobserve(container);
    // });

  });
</script>