---
// src/components/WhyChooseHills.astro
import type { HTMLAttributes } from 'astro/types';

// Define structure for individual accordion items
interface AccordionItem {
  heading: string;
  content: string;
  isOpenDefault?: boolean; // Optional: To set which item is open initially
}

// Define the properties (props) this component accepts
interface Props extends HTMLAttributes<'section'> {
  title: string; // e.g., "WHY<br>CHOOSE<br>HILLS?" (Pass with <br> for line breaks)
  accordionItems: AccordionItem[];
//   illustrationSrc: string;
//   illustrationAlt: string;
}

// Get the props passed into the component
const { title, accordionItems, ...attrs } = Astro.props;

// Generate unique IDs for ARIA attributes if needed, or just rely on classes
---

<section class="why-choose" {...attrs}>
    <div class="why-choose-grid">
      {/* Left Column: Title */}
      <div class="why-choose-left">
        {/* Use set:html to render <br> tags in the title prop */}
        <h2 class="why-choose-title" set:html={title}></h2>
      </div>

      {/* Right Column: Accordion List */}
        <div class="why-choose-right">
            <div class="accordion">
            {accordionItems.map((item, index) => (
                <div class={["accordion-item", item.isOpenDefault ? 'open' : ''].filter(Boolean).join(' ')}>
                    {/* Button for accessibility and JS hook */}
                    <button class="accordion-trigger" aria-expanded={item.isOpenDefault ? 'true' : 'false'} aria-controls={`accordion-content-${index}`}>
                        <span class="accordion-heading">{item.heading}</span>
                        {/* Consider using an SVG icon here */}
                        <span class="accordion-icon" aria-hidden="true">+</span>
                    </button>
                    {/* Content panel */}
                    <div class="accordion-content" id={`accordion-content-${index}`} aria-hidden={item.isOpenDefault ? 'false' : 'true'}>
                        {/* Use set:html if content might contain simple HTML, or just render text */}
                        <p set:html={item.content}></p>
                    </div>
                </div>
            ))}
            </div>
        </div>

      {/* Bottom: Machine Illustration spanning both columns */}
      <!-- <div class="why-choose-illustration">
        <img
          src={illustrationSrc}
          alt={illustrationAlt}
          loading="lazy"
          decoding="async"
        />
      </div> -->
    </div>
</section>

<style>
  .why-choose {
    /* Using text color utility variable */
    color: var(--color-text-grey-dark, #2A2A2A); /* Fallback to original */
    /* Fluid padding - Adjust scale (e.g., l, xl) as needed */
    padding: var(--space-section-padding) 0;
    background-color: var(--color-white); /* Assuming white background */
  }

  .why-choose-grid {
    display: grid;
    /* Fluid responsive columns */
    grid-template-columns: repeat(auto-fit, minmax(min(300px, 100%), 1fr));
    /* Fluid gap */
    gap: var(--space-fluid-l, clamp(1.5rem, 3vw + 0.5rem, 3rem));
    width: var(--width-main);
    max-width: var(--max-w-main);
    margin: 0 auto;
  }

  .why-choose-left {
    grid-row: 1; /* Will stay row 1 even when wrapped */
    grid-column: 1; /* Will stay col 1 even when wrapped */
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
    border-top: 3px solid var(--color-teal500);
    /* Fluid padding top */
    padding-top: var(--space-fluid-m, clamp(1rem, 2vw + 0.5rem, 2rem));
  }

  .why-choose-title {
    font-family: var(--ff-accent); /* Use accent font */
    /* Fluid heading size - choose appropriate level */
    font-size: var(--fs-fluid-heading-lg); /* Example, adjust if needed */
    font-weight: var(--fw-bold); /* Or semibold depending on system */
    line-height: var(--lh-xs); /* Tight line height for multi-line */
    text-transform: uppercase;
    color: var(--color-text-grey, #5C5F63); /* Match provided grey */
    margin: 0;
    white-space: pre-line; /* Respect <br> tags from prop */
  }

  .why-choose-right {
    grid-row: 1; /* Will stay row 1 */
    grid-column: 2; /* Will become col 1 when wrapped */
    /* Handle case when wrapped below title */
    @media (max-width: 650px) { /* Approx breakpoint where grid wraps - adjust! */
       grid-row: 2;
       grid-column: 1;
    }
    border-top: 3px solid var(--color-teal500);
    padding-top: var(--space-fluid-m, clamp(1rem, 2vw + 0.5rem, 2rem));
  }

  .why-choose-illustration {
    grid-row: 3; /* Move below wrapped items on small screens */
    grid-column: 1 / -1; /* Span full width */
    display: flex;
    justify-content: center;
    align-items: center;
    /* Add top margin/padding for space */
    margin-top: var(--space-fluid-l, clamp(1.5rem, 3vw + 0.5rem, 3rem));
  }

  .why-choose-illustration img {
    max-width: 100%;
    height: auto;
    display: block;
  }

  /* Accordion */
  .accordion {
    display: flex;
    flex-direction: column;
  }

  .accordion-item {
    /* Fluid vertical padding */
    padding: var(--space-fluid-m, clamp(1rem, 2vw + 0.5rem, 2rem)) 0;
    border-bottom: 1px solid var(--color-grey100, #eee);
    overflow: hidden; /* Needed for max-height transition */
  }
  /* Remove border from last item */
  .accordion-item:last-child {
    border-bottom: none;
  }

  .accordion-trigger {
    /* Reset button styles */
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    text-align: left; /* Ensure text aligns left */
    font: inherit; /* Inherit font styles */
    color: inherit; /* Inherit color */
  }

  .accordion-heading {
    font-family: var(--ff-accent); /* Use accent font */
    font-weight: var(--fw-medium);
    /* Use a fixed or slightly fluid size */
    font-size: var(--fs-base); /* Example */
    margin-right: var(--space-fluid-xs, 1rem); /* Fluid gap */
    color: var(--color-text-grey-dark, #343639); /* Use text color variable */
  }

  .accordion-icon {
    font-size: 1.2rem; /* Keep fixed size for icon */
    font-weight: var(--fw-medium);
    line-height: 1;
    transition: transform 0.3s ease;
    color: var(--color-text-grey, #5C5F63);
    flex-shrink: 0; /* Prevent icon from shrinking */
  }

  /* Opened state styling */
  .accordion-item.open .accordion-icon {
    transform: rotate(45deg);
    color: var(--color-text-grey-dark, #2A2A2A);
  }

  .accordion-content {
    font-family: var(--ff-primary);
    font-size: var(--fs-base); /* Or fluid body size */
    color: var(--color-text-grey, #5C5F63);
    line-height: var(--lh-md); /* Use line-height variable */
    /* Max-height transition for smooth open/close */
    display: grid; /* Use grid for transition */
    grid-template-rows: 0fr; /* Start collapsed */
    transition: grid-template-rows 0.3s ease-out;
    overflow: hidden;
  }
  .accordion-content > p {
      min-height: 0; /* Required for grid transition */
  }

  .accordion-item.open .accordion-content {
     grid-template-rows: 1fr; /* Expand to content height */
  }

  /* Inner paragraph styling */
  .accordion-content p {
    /* Use fluid margin top */
    margin-top: var(--space-fluid-s, clamp(0.5rem, 1vw + 0.25rem, 1rem));
    padding-right: var(--space-fluid-m, clamp(1rem, 2vw + 0.5rem, 2rem)); /* Space from icon */
    max-width: var(--max-w-text); /* Improve readability */
  }

</style>

<script>
  // Make accordion interactive
  document.addEventListener('DOMContentLoaded', () => {
    const accordion = document.querySelector('.why-choose .accordion'); // Target within component scope if multiple accordions exist
    if (!accordion) return;

    const triggers = accordion.querySelectorAll('.accordion-trigger');

    triggers.forEach(trigger => {
      trigger.addEventListener('click', () => {
        const item = trigger.closest('.accordion-item');
        if (!item) return;

        const content = item.querySelector('.accordion-content') as HTMLElement | null;
        const icon = trigger.querySelector('.accordion-icon');
        const currentlyOpen = item.classList.contains('open');

        // --- Option 1: Toggle clicked item only ---
        item.classList.toggle('open');
        trigger.setAttribute('aria-expanded', currentlyOpen ? 'false' : 'true');
        if(content) content.setAttribute('aria-hidden', currentlyOpen ? 'true' : 'false');

        // --- Option 2: Exclusive Accordion (Close others) ---
        // accordion.querySelectorAll('.accordion-item').forEach(otherItem => {
        //   if (otherItem !== item && otherItem.classList.contains('open')) {
        //     otherItem.classList.remove('open');
        //     const otherTrigger = otherItem.querySelector('.accordion-trigger');
        //     const otherContent = otherItem.querySelector('.accordion-content');
        //     if(otherTrigger) otherTrigger.setAttribute('aria-expanded', 'false');
        //     if(otherContent) otherContent.setAttribute('aria-hidden', 'true');
        //   }
        // });
        // if (!currentlyOpen) { // Open the clicked one if it wasn't open
        //   item.classList.add('open');
        //    trigger.setAttribute('aria-expanded', 'true');
        //    if(content) content.setAttribute('aria-hidden', 'false');
        // } // If it was open, clicking closes it (implicit in removing 'open' from all first)


      });
    });
  });
</script>